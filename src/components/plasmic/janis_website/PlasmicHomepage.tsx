// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5gGUsmDkteQcDm1s3dbX1r
// Component: DlQ72SJiZmbQ

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Tab from "../../Tab"; // plasmic-import: Ss0T6rPu5VE1/component
import MakeupDescription from "../../MakeupDescription"; // plasmic-import: vpKpPdjytWKi/component
import Showcase from "../../Showcase"; // plasmic-import: zjX1ZiAZla8T/component

import { useScreenVariants as useScreenVariantsdpeUlLjeGa6Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dpeULLjeGa6Y/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_janis_website.module.css"; // plasmic-import: 5gGUsmDkteQcDm1s3dbX1r/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: DlQ72SJiZmbQ/css

import BxlfacebookIcon from "./icons/PlasmicIcon__Bxlfacebook"; // plasmic-import: WNoiMa20Ezmd/icon
import AkarIconstwitterFillIcon from "./icons/PlasmicIcon__AkarIconstwitterFill"; // plasmic-import: PGVe6aBw36hQ/icon
import AkarIconsinstagramFillIcon from "./icons/PlasmicIcon__AkarIconsinstagramFill"; // plasmic-import: jKlhnsafrDZi/icon
import BxlpinterestAltIcon from "./icons/PlasmicIcon__BxlpinterestAlt"; // plasmic-import: 7QSd0mx02ktM/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  links?: p.Flex<"div">;
  heroSection?: p.Flex<"div">;
  heroDescription?: p.Flex<"div">;
  button?: p.Flex<"div">;
  social?: p.Flex<"div">;
  servicesSection?: p.Flex<"div">;
  sectionDescription?: p.Flex<"div">;
  expressMakeupMobile?: p.Flex<"div">;
  expressMakeup2?: p.Flex<"div">;
  socialMakeupMobile?: p.Flex<"div">;
  expressMakeup3?: p.Flex<"div">;
  socialMakeup2?: p.Flex<"div">;
  weddingMakeupMobile?: p.Flex<"div">;
  expressMakeup4?: p.Flex<"div">;
  socialMakeup3?: p.Flex<"div">;
  weddingMakeup2?: p.Flex<"div">;
  showcase?: p.Flex<typeof Showcase>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdpeUlLjeGa6Y()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            hasGap={true}
            className={classNames(projectcss.all, sty.navBar)}
          >
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Ijsg
                )}
              >
                {"Meraki"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7IjLw
                )}
              >
                {"makeup"}
              </div>
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"links"}
              data-plasmic-override={overrides.links}
              hasGap={true}
              className={classNames(projectcss.all, sty.links)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tz8PG
                )}
              >
                {"Inicio"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__erwbD
                )}
                onClick={async event => {
                  const $steps = {};
                  $steps["runInteractionProp"] = true
                    ? (() => {
                        const actionArgs = {};
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "invokeEventHandler",
                            interactionUuid: "Ylawagg-0hif",
                            componentUuid: "DlQ72SJiZmbQ"
                          },
                          () =>
                            (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["runInteractionProp"] === "object" &&
                    typeof $steps["runInteractionProp"].then === "function"
                  ) {
                    $steps["runInteractionProp"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "invokeEventHandler",
                        interactionUuid: "Ylawagg-0hif",
                        componentUuid: "DlQ72SJiZmbQ"
                      },
                      $steps["runInteractionProp"]
                    );
                  }
                }}
              >
                {"Servicios"}
              </div>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.heroSection)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"heroDescription"}
              data-plasmic-override={overrides.heroDescription}
              hasGap={true}
              className={classNames(projectcss.all, sty.heroDescription)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qxHne
                )}
              >
                {"\u00bfEst\u00e1s lista para mostrar tu mejor versi\u00f3n?"}
              </div>
              <p.Stack
                as={"div"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, sty.button)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fxMgo
                  )}
                >
                  {"Reserva un turno"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"social"}
                data-plasmic-override={overrides.social}
                hasGap={true}
                className={classNames(projectcss.all, sty.social)}
              >
                <BxlfacebookIcon
                  className={classNames(projectcss.all, sty.svg__fenV4)}
                  role={"img"}
                />

                <AkarIconstwitterFillIcon
                  className={classNames(projectcss.all, sty.svg__nIk2P)}
                  role={"img"}
                />

                <AkarIconsinstagramFillIcon
                  className={classNames(projectcss.all, sty.svg__iWhYj)}
                  role={"img"}
                />

                <BxlpinterestAltIcon
                  className={classNames(projectcss.all, sty.svg__xUmTu)}
                  role={"img"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"servicesSection"}
            data-plasmic-override={overrides.servicesSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.servicesSection)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionDescription"}
              data-plasmic-override={overrides.sectionDescription}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionDescription)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pnz9Q
                )}
              >
                {"Nuestros servicios"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xwuBk
                )}
              >
                {"Tenemos tres tipos de maquillaje, descubrilos aqu\u00ed."}
              </div>
            </p.Stack>
            <div
              data-plasmic-name={"expressMakeupMobile"}
              data-plasmic-override={overrides.expressMakeupMobile}
              className={classNames(projectcss.all, sty.expressMakeupMobile)}
            >
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <Tab
                  big={
                    hasVariant(globalVariants, "screen", "phone2")
                      ? undefined
                      : hasVariant(globalVariants, "screen", "phone")
                      ? true
                      : true
                  }
                  className={classNames("__wab_instance", sty.tab__jZBz)}
                  selected={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o8AC
                    )}
                  >
                    {"Makeup express"}
                  </div>
                </Tab>
              ) : null}
              <div
                data-plasmic-name={"expressMakeup2"}
                data-plasmic-override={overrides.expressMakeup2}
                className={classNames(projectcss.all, sty.expressMakeup2)}
              />

              <MakeupDescription
                className={classNames(
                  "__wab_instance",
                  sty.makeupDescription__ki1Xt
                )}
                makeupType={"express"}
                mobile={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vkb9W
                  )}
                >
                  {
                    "Limpieza superficial e hidrataci\u00f3n de la piel. Dise\u00f1o de cejas. Correcci\u00f3n de imperfecciones de la piel. Contorno de rostro. Delineado. M\u00e1scara de pesta\u00f1as. Labial."
                  }
                </div>
              </MakeupDescription>
            </div>
            <div
              data-plasmic-name={"socialMakeupMobile"}
              data-plasmic-override={overrides.socialMakeupMobile}
              className={classNames(projectcss.all, sty.socialMakeupMobile)}
            >
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <Tab
                  big={
                    hasVariant(globalVariants, "screen", "phone2")
                      ? undefined
                      : hasVariant(globalVariants, "screen", "phone")
                      ? true
                      : true
                  }
                  className={classNames("__wab_instance", sty.tab__hRYt9)}
                  selected={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4T5Ca
                    )}
                  >
                    {"Makeup social"}
                  </div>
                </Tab>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "tablet") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"expressMakeup3"}
                  data-plasmic-override={overrides.expressMakeup3}
                  className={classNames(projectcss.all, sty.expressMakeup3)}
                />
              ) : null}
              <div
                data-plasmic-name={"socialMakeup2"}
                data-plasmic-override={overrides.socialMakeup2}
                className={classNames(projectcss.all, sty.socialMakeup2)}
              />

              <MakeupDescription
                className={classNames(
                  "__wab_instance",
                  sty.makeupDescription__i6Auw
                )}
                makeupType={"social"}
                mobile={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6GAhR
                  )}
                >
                  {
                    "Limpieza superficial e hidrataci\u00f3n de la piel. Dise\u00f1o de cejas. Correcci\u00f3n de imperfecciones de la piel. Contorno de rostro. Delineado. M\u00e1scara de pesta\u00f1as. Labial."
                  }
                </div>
              </MakeupDescription>
            </div>
            {(
              hasVariant(globalVariants, "screen", "phone")
                ? true
                : hasVariant(globalVariants, "screen", "tablet2")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : false
            ) ? (
              <div
                data-plasmic-name={"weddingMakeupMobile"}
                data-plasmic-override={overrides.weddingMakeupMobile}
                className={classNames(projectcss.all, sty.weddingMakeupMobile)}
              >
                {(
                  hasVariant(globalVariants, "screen", "tablet") ? true : false
                ) ? (
                  <Tab
                    big={
                      hasVariant(globalVariants, "screen", "phone2")
                        ? undefined
                        : hasVariant(globalVariants, "screen", "phone")
                        ? true
                        : true
                    }
                    className={classNames("__wab_instance", sty.tab___9S5V)}
                    selected={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rTc
                      )}
                    >
                      {"Makeup para bodas"}
                    </div>
                  </Tab>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "tablet") ? true : false
                ) ? (
                  <div
                    data-plasmic-name={"expressMakeup4"}
                    data-plasmic-override={overrides.expressMakeup4}
                    className={classNames(projectcss.all, sty.expressMakeup4)}
                  />
                ) : null}
                <div
                  data-plasmic-name={"socialMakeup3"}
                  data-plasmic-override={overrides.socialMakeup3}
                  className={classNames(projectcss.all, sty.socialMakeup3)}
                />

                <div
                  data-plasmic-name={"weddingMakeup2"}
                  data-plasmic-override={overrides.weddingMakeup2}
                  className={classNames(projectcss.all, sty.weddingMakeup2)}
                />

                <MakeupDescription
                  className={classNames(
                    "__wab_instance",
                    sty.makeupDescription__fjm9W
                  )}
                  makeupType={"wedding"}
                  mobile={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pUyB
                    )}
                  >
                    {
                      "Limpieza superficial e hidrataci\u00f3n de la piel. Dise\u00f1o de cejas. Correcci\u00f3n de imperfecciones de la piel. Contorno de rostro. Delineado. M\u00e1scara de pesta\u00f1as. Labial."
                    }
                  </div>
                </MakeupDescription>
              </div>
            ) : null}
            <Showcase
              data-plasmic-name={"showcase"}
              data-plasmic-override={overrides.showcase}
              className={classNames("__wab_instance", sty.showcase)}
              makeupType={"express"}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "logo",
    "links",
    "heroSection",
    "heroDescription",
    "button",
    "social",
    "servicesSection",
    "sectionDescription",
    "expressMakeupMobile",
    "expressMakeup2",
    "socialMakeupMobile",
    "expressMakeup3",
    "socialMakeup2",
    "weddingMakeupMobile",
    "expressMakeup4",
    "socialMakeup3",
    "weddingMakeup2",
    "showcase"
  ],
  navBar: ["navBar", "logo", "links"],
  logo: ["logo"],
  links: ["links"],
  heroSection: ["heroSection", "heroDescription", "button", "social"],
  heroDescription: ["heroDescription", "button", "social"],
  button: ["button"],
  social: ["social"],
  servicesSection: [
    "servicesSection",
    "sectionDescription",
    "expressMakeupMobile",
    "expressMakeup2",
    "socialMakeupMobile",
    "expressMakeup3",
    "socialMakeup2",
    "weddingMakeupMobile",
    "expressMakeup4",
    "socialMakeup3",
    "weddingMakeup2",
    "showcase"
  ],
  sectionDescription: ["sectionDescription"],
  expressMakeupMobile: ["expressMakeupMobile", "expressMakeup2"],
  expressMakeup2: ["expressMakeup2"],
  socialMakeupMobile: ["socialMakeupMobile", "expressMakeup3", "socialMakeup2"],
  expressMakeup3: ["expressMakeup3"],
  socialMakeup2: ["socialMakeup2"],
  weddingMakeupMobile: [
    "weddingMakeupMobile",
    "expressMakeup4",
    "socialMakeup3",
    "weddingMakeup2"
  ],
  expressMakeup4: ["expressMakeup4"],
  socialMakeup3: ["socialMakeup3"],
  weddingMakeup2: ["weddingMakeup2"],
  showcase: ["showcase"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: "div";
  logo: "div";
  links: "div";
  heroSection: "div";
  heroDescription: "div";
  button: "div";
  social: "div";
  servicesSection: "div";
  sectionDescription: "div";
  expressMakeupMobile: "div";
  expressMakeup2: "div";
  socialMakeupMobile: "div";
  expressMakeup3: "div";
  socialMakeup2: "div";
  weddingMakeupMobile: "div";
  expressMakeup4: "div";
  socialMakeup3: "div";
  weddingMakeup2: "div";
  showcase: typeof Showcase;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    logo: makeNodeComponent("logo"),
    links: makeNodeComponent("links"),
    heroSection: makeNodeComponent("heroSection"),
    heroDescription: makeNodeComponent("heroDescription"),
    button: makeNodeComponent("button"),
    social: makeNodeComponent("social"),
    servicesSection: makeNodeComponent("servicesSection"),
    sectionDescription: makeNodeComponent("sectionDescription"),
    expressMakeupMobile: makeNodeComponent("expressMakeupMobile"),
    expressMakeup2: makeNodeComponent("expressMakeup2"),
    socialMakeupMobile: makeNodeComponent("socialMakeupMobile"),
    expressMakeup3: makeNodeComponent("expressMakeup3"),
    socialMakeup2: makeNodeComponent("socialMakeup2"),
    weddingMakeupMobile: makeNodeComponent("weddingMakeupMobile"),
    expressMakeup4: makeNodeComponent("expressMakeup4"),
    socialMakeup3: makeNodeComponent("socialMakeup3"),
    weddingMakeup2: makeNodeComponent("weddingMakeup2"),
    showcase: makeNodeComponent("showcase"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
